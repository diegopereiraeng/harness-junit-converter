[
    {
        "object_name": "Ingress/networking.k8s.io/v1//place_holder-place_holder-ingress",
        "type_meta": {
            "kind": "Ingress",
            "apiVersion": "networking.k8s.io/v1"
        },
        "object_meta": {
            "name": "place_holder-place_holder-ingress",
            "creationTimestamp": null,
            "annotations": {
                "nginx.ingress.kubernetes.io/rewrite-target": "/$1",
                "nginx.ingress.kubernetes.io/ssl-redirect": "false",
                "nginx.ingress.kubernetes.io/use-regex": "true"
            }
        },
        "checks": [
            {
                "check": {
                    "name": "Ingress targets Service",
                    "id": "ingress-targets-service",
                    "target_type": "Ingress",
                    "comment": "Makes sure that the Ingress targets a Service",
                    "optional": false
                },
                "grade": 10,
                "skipped": false,
                "comments": null
            },
            {
                "check": {
                    "name": "Stable version",
                    "id": "stable-version",
                    "target_type": "all",
                    "comment": "Checks if the object is using a deprecated apiVersion",
                    "optional": false
                },
                "grade": 10,
                "skipped": false,
                "comments": null
            },
            {
                "check": {
                    "name": "Label values",
                    "id": "label-values",
                    "target_type": "all",
                    "comment": "Validates label values",
                    "optional": false
                },
                "grade": 10,
                "skipped": false,
                "comments": null
            }
        ],
        "file_name": "/harness/template-results/service.yaml",
        "file_row": 33
    },
    {
        "object_name": "Deployment/apps/v1//place_holder-place_holder",
        "type_meta": {
            "kind": "Deployment",
            "apiVersion": "apps/v1"
        },
        "object_meta": {
            "name": "place_holder-place_holder",
            "creationTimestamp": null
        },
        "checks": [
            {
                "check": {
                    "name": "Stable version",
                    "id": "stable-version",
                    "target_type": "all",
                    "comment": "Checks if the object is using a deprecated apiVersion",
                    "optional": false
                },
                "grade": 10,
                "skipped": false,
                "comments": null
            },
            {
                "check": {
                    "name": "Label values",
                    "id": "label-values",
                    "target_type": "all",
                    "comment": "Validates label values",
                    "optional": false
                },
                "grade": 10,
                "skipped": false,
                "comments": null
            },
            {
                "check": {
                    "name": "Container Seccomp Profile",
                    "id": "container-seccomp-profile",
                    "target_type": "Pod",
                    "comment": "Makes sure that all pods have at a seccomp policy configured.",
                    "optional": true
                },
                "grade": 5,
                "skipped": true,
                "comments": [
                    {
                        "path": "",
                        "summary": "Skipped because container-seccomp-profile is ignored",
                        "description": ""
                    }
                ]
            },
            {
                "check": {
                    "name": "Pod Topology Spread Constraints",
                    "id": "pod-topology-spread-constraints",
                    "target_type": "Pod",
                    "comment": "Pod Topology Spread Constraints",
                    "optional": false
                },
                "grade": 10,
                "skipped": false,
                "comments": [
                    {
                        "path": "",
                        "summary": "Pod Topology Spread Constraints",
                        "description": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed"
                    }
                ]
            },
            {
                "check": {
                    "name": "Container Resource Requests Equal Limits",
                    "id": "container-resource-requests-equal-limits",
                    "target_type": "Pod",
                    "comment": "Makes sure that all pods have the same requests as limits on resources set.",
                    "optional": true
                },
                "grade": 1,
                "skipped": true,
                "comments": [
                    {
                        "path": "",
                        "summary": "Skipped because container-resource-requests-equal-limits is ignored",
                        "description": ""
                    }
                ]
            },
            {
                "check": {
                    "name": "Container Ephemeral Storage Request Equals Limit",
                    "id": "container-ephemeral-storage-request-equals-limit",
                    "target_type": "Pod",
                    "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
                    "optional": true
                },
                "grade": 10,
                "skipped": true,
                "comments": [
                    {
                        "path": "",
                        "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
                        "description": ""
                    }
                ]
            },
            {
                "check": {
                    "name": "Container Security Context ReadOnlyRootFilesystem",
                    "id": "container-security-context-readonlyrootfilesystem",
                    "target_type": "Pod",
                    "comment": "Makes sure that all pods have a security context with read only filesystem set",
                    "optional": false
                },
                "grade": 1,
                "skipped": false,
                "comments": [
                    {
                        "path": "place_holder-place_holder",
                        "summary": "Container has no configured security context",
                        "description": "Set securityContext to run the container in a more secure context."
                    }
                ]
            },
            {
                "check": {
                    "name": "Pod Probes",
                    "id": "pod-probes",
                    "target_type": "Pod",
                    "comment": "Makes sure that all Pods have safe probe configurations",
                    "optional": false
                },
                "grade": 1,
                "skipped": false,
                "comments": [
                    {
                        "path": "",
                        "summary": "Container is missing a readinessProbe",
                        "description": "A readinessProbe should be used to indicate when the service is ready to receive traffic. Without it, the Pod is risking to receive traffic before it has booted. It's also used during rollouts, and can prevent downtime if a new version of the application is failing."
                    }
                ]
            },
            {
                "check": {
                    "name": "Container Ephemeral Storage Request and Limit",
                    "id": "container-ephemeral-storage-request-and-limit",
                    "target_type": "Pod",
                    "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
                    "optional": false
                },
                "grade": 1,
                "skipped": false,
                "comments": [
                    {
                        "path": "place_holder-place_holder",
                        "summary": "Ephemeral Storage limit is not set",
                        "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
                    }
                ]
            },
            {
                "check": {
                    "name": "Container Ports Check",
                    "id": "container-ports-check",
                    "target_type": "Pod",
                    "comment": "Container Ports Checks",
                    "optional": true
                },
                "grade": 10,
                "skipped": true,
                "comments": [
                    {
                        "path": "",
                        "summary": "Skipped because container-ports-check is ignored",
                        "description": ""
                    }
                ]
            },
            {
                "check": {
                    "name": "Environment Variable Key Duplication",
                    "id": "environment-variable-key-duplication",
                    "target_type": "Pod",
                    "comment": "Makes sure that duplicated environment variable keys are not duplicated",
                    "optional": false
                },
                "grade": 10,
                "skipped": false,
                "comments": null
            },
            {
                "check": {
                    "name": "Container Image Tag",
                    "id": "container-image-tag",
                    "target_type": "Pod",
                    "comment": "Makes sure that a explicit non-latest tag is used",
                    "optional": false
                },
                "grade": 1,
                "skipped": false,
                "comments": [
                    {
                        "path": "place_holder-place_holder",
                        "summary": "Image with latest tag",
                        "description": "Using a fixed tag is recommended to avoid accidental upgrades"
                    }
                ]
            },
            {
                "check": {
                    "name": "Container Security Context Privileged",
                    "id": "container-security-context-privileged",
                    "target_type": "Pod",
                    "comment": "Makes sure that all pods have a unprivileged security context set",
                    "optional": false
                },
                "grade": 10,
                "skipped": false,
                "comments": null
            },
            {
                "check": {
                    "name": "Container Resources",
                    "id": "container-resources",
                    "target_type": "Pod",
                    "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
                    "optional": false
                },
                "grade": 10,
                "skipped": false,
                "comments": null
            },
            {
                "check": {
                    "name": "Container CPU Requests Equal Limits",
                    "id": "container-cpu-requests-equal-limits",
                    "target_type": "Pod",
                    "comment": "Makes sure that all pods have the same CPU requests as limits set.",
                    "optional": true
                },
                "grade": 1,
                "skipped": true,
                "comments": [
                    {
                        "path": "",
                        "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
                        "description": ""
                    }
                ]
            },
            {
                "check": {
                    "name": "Container Memory Requests Equal Limits",
                    "id": "container-memory-requests-equal-limits",
                    "target_type": "Pod",
                    "comment": "Makes sure that all pods have the same memory requests as limits set.",
                    "optional": true
                },
                "grade": 1,
                "skipped": true,
                "comments": [
                    {
                        "path": "",
                        "summary": "Skipped because container-memory-requests-equal-limits is ignored",
                        "description": ""
                    }
                ]
            },
            {
                "check": {
                    "name": "Container Image Pull Policy",
                    "id": "container-image-pull-policy",
                    "target_type": "Pod",
                    "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
                    "optional": false
                },
                "grade": 10,
                "skipped": false,
                "comments": null
            },
            {
                "check": {
                    "name": "Pod NetworkPolicy",
                    "id": "pod-networkpolicy",
                    "target_type": "Pod",
                    "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
                    "optional": false
                },
                "grade": 1,
                "skipped": false,
                "comments": [
                    {
                        "path": "",
                        "summary": "The pod does not have a matching NetworkPolicy",
                        "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
                    }
                ]
            },
            {
                "check": {
                    "name": "Container Security Context User Group ID",
                    "id": "container-security-context-user-group-id",
                    "target_type": "Pod",
                    "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
                    "optional": false
                },
                "grade": 1,
                "skipped": false,
                "comments": [
                    {
                        "path": "place_holder-place_holder",
                        "summary": "Container has no configured security context",
                        "description": "Set securityContext to run the container in a more secure context."
                    }
                ]
            },
            {
                "check": {
                    "name": "Deployment has PodDisruptionBudget",
                    "id": "deployment-has-poddisruptionbudget",
                    "target_type": "Deployment",
                    "comment": "Makes sure that all Deployments are targeted by a PDB",
                    "optional": false
                },
                "grade": 0,
                "skipped": true,
                "comments": [
                    {
                        "path": "",
                        "summary": "Skipped because the deployment has less than 2 replicas",
                        "description": ""
                    }
                ]
            },
            {
                "check": {
                    "name": "Deployment has host PodAntiAffinity",
                    "id": "deployment-has-host-podantiaffinity",
                    "target_type": "Deployment",
                    "comment": "Makes sure that a podAntiAffinity has been set that prevents multiple pods from being scheduled on the same node. https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
                    "optional": false
                },
                "grade": 0,
                "skipped": true,
                "comments": [
                    {
                        "path": "",
                        "summary": "Skipped because the deployment has less than 2 replicas",
                        "description": ""
                    }
                ]
            },
            {
                "check": {
                    "name": "Deployment targeted by HPA does not have replicas configured",
                    "id": "deployment-targeted-by-hpa-does-not-have-replicas-configured",
                    "target_type": "Deployment",
                    "comment": "Makes sure that Deployments using a HorizontalPodAutoscaler doesn't have a statically configured replica count set",
                    "optional": false
                },
                "grade": 10,
                "skipped": true,
                "comments": [
                    {
                        "path": "",
                        "summary": "Skipped because the deployment is not targeted by a HorizontalPodAutoscaler",
                        "description": ""
                    }
                ]
            },
            {
                "check": {
                    "name": "Deployment Pod Selector labels match template metadata labels",
                    "id": "deployment-pod-selector-labels-match-template-metadata-labels",
                    "target_type": "Deployment",
                    "comment": "Ensure the StatefulSet selector labels match the template metadata labels.",
                    "optional": false
                },
                "grade": 10,
                "skipped": false,
                "comments": null
            }
        ],
        "file_name": "/harness/template-results/deployment.yaml",
        "file_row": 32
    },
    {
        "object_name": "Service/v1//place_holder-place_holder",
        "type_meta": {
            "kind": "Service",
            "apiVersion": "v1"
        },
        "object_meta": {
            "name": "place_holder-place_holder",
            "creationTimestamp": null
        },
        "checks": [
            {
                "check": {
                    "name": "Stable version",
                    "id": "stable-version",
                    "target_type": "all",
                    "comment": "Checks if the object is using a deprecated apiVersion",
                    "optional": false
                },
                "grade": 10,
                "skipped": false,
                "comments": null
            },
            {
                "check": {
                    "name": "Label values",
                    "id": "label-values",
                    "target_type": "all",
                    "comment": "Validates label values",
                    "optional": false
                },
                "grade": 10,
                "skipped": false,
                "comments": null
            },
            {
                "check": {
                    "name": "Service Targets Pod",
                    "id": "service-targets-pod",
                    "target_type": "Service",
                    "comment": "Makes sure that all Services targets a Pod",
                    "optional": false
                },
                "grade": 10,
                "skipped": false,
                "comments": null
            },
            {
                "check": {
                    "name": "Service Type",
                    "id": "service-type",
                    "target_type": "Service",
                    "comment": "Makes sure that the Service type is not NodePort",
                    "optional": false
                },
                "grade": 10,
                "skipped": false,
                "comments": null
            }
        ],
        "file_name": "/harness/template-results/service.yaml",
        "file_row": 1
    }
]